spring:
  application:
    name: choerodon-gateway
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.org:3306/hzero_platform?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:hzero}
    password: ${SPRING_DATASOURCE_PASSWORD:hzero}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  cache:
    multi:
      l1:
        enabled: false # 是否开启一级缓存
        type: caffeine # 一级缓存实现。目前支持caffeine和guava
      l2:
        enabled: false # 是否开启二级缓存
        type: redis # 二级缓存的实现
      caches:
        permission: # 请求对应的权限缓存
          l1-spec: initialCapacity=50,maximumSize=500,expireAfterWrite=300s
          l2-spec: expiration=300
  servlet:
    multipart:
      enabled: true
      max-request-size: 200MB
      # ci 流水线功能 中上传软件包需要这么大的限制
      max-file-size: 200MB
  redis:
    host: ${SPRING_REDIS_HOST:redis.hzero.org}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:4}
    # Redis连接超时时间
    connect-timeout: ${SPRING_REDIS_CONNECT_TIMEOUT:2000}
    # Redis读取超时时间
    timeout: ${SPRING_REDIS_READ_TIMEOUT:5000}
    lettuce:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  cloud:
    gateway:
      default-filters:
        # 开启主键加密 可选值 encrypt（主键加密）、to_string（主键变字符串类型）、do_nothing（关闭加密）
        - SetRequestHeader=H-Request-Encrypt, ${HZERO_REQUEST_ENCRYPT_MODE:encrypt}
        # 文件下载需要加上该请求头
        - SetResponseHeader=Access-Control-Expose-Headers, Content-Disposition
        # 过滤重复的请求头
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin Vary, RETAIN_UNIQUE
      filter:
        secure-headers:
          frame-options: ${SECURE_HEADERS_FRAME_OPTIONS:allow-from http://hzeronf.saas.hand-china.com}
      discovery:
        locator:
          enabled: true
#      default-filters:
#      - RemoveResponseHeader=X-Frame-Options
      routes:
      - id: hiam
        uri: lb://choerodon-iam
        predicates:
        - Path=/iam/**
        filters:
        - StripPrefix=1
      # 兼容旧的外部组件（例如已经在集群管理中安装的prometheus或者sonarqube等）对base-service服务的调用,
      # 将 /base/ 开头的请求也路由到 iam 处理
      - id: old-base
        uri: lb://choerodon-iam
        predicates:
          - Path=/base/**
        filters:
          - StripPrefix=1
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter.replenishRate: 100
#            redis-rate-limiter.burstCapacity: 100
#            redis-rate-limiter.replenishRateMap."user1role1": 1
#            redis-rate-limiter.burstCapacityMap."user1role1": 1
#            rate-limiter: "#{@enhancedRedisRateLimiter}"
#            key-resolver: "#{@userKeyResolver}"
#            key-resolver: "#{
#            new org.hzero.gateway.ratelimit.dimension.CombinedKeyResolver(
#              new org.hzero.gateway.ratelimit.dimension.UserKeyResolver(),
#              new org.hzero.gateway.ratelimit.dimension.RoleKeyResolver()
#            )}"
      - id: hoth
        uri: lb://choerodon-oauth
        predicates:
        - Path=/oauth/**
        filters:
        - PreserveHostHeader
      - id: hmnt
        uri: lb://choerodon-monitor
        predicates:
        - Path=/hmnt/**
        filters:
        - StripPrefix=1
      - id: hwgr
        uri: lb://choerodon-swagger
        predicates:
        - Path=/swagger/**
        filters:
        - StripPrefix=1
      - id: hagd
        uri: lb://choerodon-asgard
        predicates:
        - Path=/hagd/**
        filters:
        - StripPrefix=1
      - id: hpfm
        uri: lb://choerodon-platform
        predicates:
        - Path=/hpfm/**
        filters:
        - StripPrefix=1
      - id: hfle
        uri: lb://choerodon-file
        predicates:
        - Path=/hfle/**
        filters:
        - StripPrefix=1
      - id: hmsg
        uri: lb://choerodon-message
        predicates:
        - Path=/hmsg/**
        filters:
        - StripPrefix=1
      - id: rducm
        uri: lb://code-repo-service
        predicates:
        - Path=/rducm/**
        filters:
        - StripPrefix=1
      - id: rdudm
        uri: lb://doc-repo-service
        predicates:
        - Path=/rdudm/**
        filters:
        - StripPrefix=1
      - id: rdupm
        uri: lb://prod-repo-service
        predicates:
        - Path=/rdupm/**
        filters:
        - StripPrefix=1
      - id: hrds-qa
        uri: lb://hrds-qa
        predicates:
        - Path=/rdqam/**
        filters:
        - StripPrefix=1
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter.replenishRate: 100
#            redis-rate-limiter.burstCapacity: 100
#            redis-rate-limiter.replenishRateMap."url.v1.rest.invoke._namespace-test_serverCode-test_interfaceCode-testrole1": 1
#            redis-rate-limiter.burstCapacityMap."url.v1.rest.invoke._namespace-test_serverCode-test_interfaceCode-testrole1": 1
#            rate-limiter: "#{@enhancedRedisRateLimiter}"
            #key-resolver: "#{@userKeyResolver}"
#            key-resolver: "#{
#            new org.hzero.gateway.ratelimit.dimension.CombinedKeyResolver(
#              new org.hzero.gateway.ratelimit.dimension.UrlKeyResolver(\"/v1/{1}/invoke?namespace={2}&serverCode={3}&interfaceCode={4}\"),
#              new org.hzero.gateway.ratelimit.dimension.RoleKeyResolver()
#            )}"
      - id: hadm
        uri: lb://choerodon-admin
        predicates:
        - Path=/hadm/**
      - id: hdm
        uri: lb://data-migration
        predicates:
        - Path=/hdm/**
      - id: knowledge
        uri: lb://knowledgebase-service
        predicates:
        - Path=/knowledge/**
        filters:
        - StripPrefix=1
      - id: agile
        uri: lb://agile-service
        predicates:
        - Path=/agile/**
        filters:
        - StripPrefix=1
      - id: test-manager
        uri: lb://test-manager-service
        predicates:
        - Path=/test/**
        filters:
        - StripPrefix=1
      - id: cwkf
        uri: lb://workflow-service
        predicates:
        - Path=/cwkf/**
        filters:
        - StripPrefix=1
      - id: devops-service
        uri: lb://devops-service
        predicates:
        - Path=/devops/**
        filters:
        - StripPrefix=1
      - id: market-service
        uri: lb://market-service
        predicates:
        - Path=/market/**
        filters:
        - StripPrefix=1
      - id: governance-service
        uri: lb://governance-service
        predicates:
        - Path=/governance/**
        filters:
        - StripPrefix=1
  web:
    resources:
      # 资源缓存时间，单位秒
      cache:
        period: 3600
      chain:
        # 开启压缩
        compressed: true
        # 启用缓存
        cache: true

server:
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:4}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)。默认false
    direct-buffers: true
    # HTTP POST请求最大的大小。默认0，无限制，可设置10M
    max-http-post-size: 10485760

mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
    key-generator: snowflake
    snowflake:
      start-timestamp: 1577808000000
      meta-provider: redis
      meta-provider-redis-db: ${SPRING_REDIS_DATABASE:1}
      meta-provider-redis-refresh-interval: 540000
      meta-provider-redis-expire: 600000

feign:
  circuitbreaker:
    # 启用断路器
    enabled: ${FEIGN_CIRCUITBREAKER_ENABLED:true}
  # 请求压缩配置
  compression:
    request:
      # 配置请求GZIP压缩
      enabled: ${FEIGN_COMPRESSION_REQUEST_ENABLED:true}
      # 配置压缩数据大小的下限
      min-request-size: ${FEIGN_COMPRESSION_REQUEST_MIN_REQUEST_SIZE:2048}
  # Feign客户端配置
  client:
    config:
      # Feign客户端默认配置
      default:
        # 连接超时
        connectTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT:2000}
        # 读取超时
        readTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT:5000}
        # Feign日志级别：NONE/BASIC/HEADERS/FULL
        loggerLevel: ${FEIGN_CLIENT_CONFIG_DEFAULT_LOGGER_LEVEL:FULL}

hzero:
  service:
    platform:
      name: choerodon-platform
    oauth:
      name: choerodon-oauth
    iam:
      name: choerodon-iam
    file:
      name: choerodon-file
    message:
      name: choerodon-message
    admin:
      name: choerodon-admin
    swagger:
      name: choerodon-swagger
    gateway:
      name: choerodon-gateway
    monitor:
      name: choerodon-monitor
  gateway:
    # 跨域配置
    cors:
      allowed-origins:
        - "*"
      allowed-headers:
        - "*"
      allowed-methods:
        - "*"
    helper:
      enabled: true
      ## 启用API签名
      signature:
        enabled: false
        secrets:
          - secretId: hzero
            secretKey: 537509248a3da7804d12905c102d14cd1bec000797a6178a7353a4c3ac23a0b3
      jwt-key: hzero # jwt的密钥
      authenticate:
        call-redis:
          # token续期配置
          callOauthServiceOnSuccess: true
          enable: true
      # 是否打印 JWT
      enabled-jwt-log: ${HZERO_GATEWAY_HELPER_ENABLE_JWT_LOG:false}
      # OAuth服务 context-path
      oauth-context-path: ${HZERO_GATEWAY_HELPER_OAUTH_CONTEXT_PATH:/oauth}
      filter:
        collect-span:
          # 是否统计API访问情况
          enabled: ${HZERO_GATEWAY_FILTER_COLLECT_SPAN_ENABLED:false}
        common-request:
          check-current-role: false
          # 租户级API是否必须检查租户参数
          check-tenant: ${HZERO_GATEWAY_FILTER_COMMON_REQUEST_CHECK_ORGANIZATION:true}
          # 项目级API是否必须检查项目参数
          check-project: ${HZERO_GATEWAY_FILTER_COMMON_REQUEST_CHECK_PROJECT:true}
          # 是否启用标准的权限检查
          enabled: ${HZERO_GATEWAY_FILTER_COMMON_REQUEST_ENABLE:true}
      permission:
        cache-seconds: 600 # 请求地址和对应的权限缓存时间
        cache-size: 3000  # 请求地址和对应的权限缓存大小
        skip-paths:
          - /oauth/**
          - /hap/lib/**
          - /hap/static/**
          - /hap/resources/**
          - /hap/editor-app/**
          - /swagger/swagger-ui.html
          - /swagger/swagger-resources/**
          - /swagger/webjars/**
          - /swagger/docs/**
          - /hwfp/editor-app/**
          - /hwfp/lib/**
          - /hwfp/activiti-editor
          - /*/sock-js/**
          - /*/websocket/**
          - /maintain
          - /actuator/**
          - /hexl/lib/**
          - /hexl-*/lib/**
          - /hadm
          - /hadm/
          - /hadm/applications
          - /hadm/notifications/filters
          - /hadm/instances/**
          - /hadm/assets/**
          - /hims/lib/**
          - /hfle/lib/**
          - /*/lib/**
          - /**/webjars/**
          - /rdupm/v1/nexus/proxy/**
        internal-paths:
          - /oauth/admin/*
          - /v2/choerodon/api-docs
  ## 服务整体运维配置
  maintain:
    # 全局运维信息
    global-info:
      state: NORMAL
    # 服务运维信息
    service-maintain-info:
      oauth:
        state: NORMAL
    # 运维接口密钥，不配置则在程序启动时生成随机key
    secret-key: hzero
  request:
    counter:
      enable: true

logging:
  level:
    org.springframework.cloud: info
    io.github.resilience4j: info
    com.netflix.discovery: warn
    org.hzero.boot.platform.lov: info
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}